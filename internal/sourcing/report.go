// Package sourcing contains ways to report a state
package sourcing

import (
	"fmt"
	"io"
	"strings"
	"text/template"
	"time"
)

const (
	header                   = "<!-- This file is generated by sp v1. Please don't edit it directly -->"
	glanceTitle       string = "## At a glance [(‚Ñπ)]((https://github.com/jazcarate/sp/blob/master/docs/understanding_a_report.md#at-a-glance))"
	emptyHelp         string = "üóÖ Starting out a new Split Chain and don't know \"what now?\". No problem! Check the [docs](https://github.com/jazcarate/sp/blob/master/docs/new_sp_now_what.md)"
	participantsTitle        = "## Participants"
	detailsTitle             = "## Details"
	operationsTitle          = "## Operations"
)

const markdownTemplate string = header + `
# {{ .Name }}{{ $st := . }}
{{if .Participants}}
` + glanceTitle + `
| | {{ range .Participants }}[{{ .Name }}]({{ .Name | ToMarkdownAnchor }}) | {{ end }}
| --- | {{ range .Participants }} ---: | {{ end }}{{ range $x, $ := .Participants }}
|[{{ .Name }}]({{ .Name | ToMarkdownAnchor }})|{{ range $y, $ := $st.Participants }}{{ Glance $x $y }}|{{ end }}{{ end }}

` + participantsTitle + `
| Name | Split | %age |
| --- | ---: | ---: |{{ range .Participants }}
|[{{ .Name }}]({{ .Name | ToMarkdownAnchor }})|{{ .Split }}|{{ .SplitPercentage }}%|{{ end }}

` + detailsTitle + `{{ if .Log }}{{ range $i, $ := .Participants }}
### {{ .Name }}
<!-- Public key {{ .PublicKey }} -->
You currently split the expenditures at **{{ .SplitPercentage }}%**.
{{ range $ip, $val := $st.Balance.Iterate $i }}{{ BalanceDetail $ip $val }}{{ end }}{{ end }}{{end}}{{ else }}
` + emptyHelp + `{{end}}
` + operationsTitle + `
Current trust configuration: **{{ .Configuration }}** [(‚Ñπ)](https://github.com/jazcarate/sp/blob/master/docs/understanding_a_report.md{{ .Configuration | ToMarkdownAnchor }})

### Log{{if .Log}} [(go to the last ‚¨á)](#op-{{ .LastOp }})
| # |  Operation | On | Note | Status |
| ---: | --- | --- | --- | ---: |{{ range .Log }}
|[{{ .ID }}](#op-{{ .ID }})<a id="op-{{ .ID }}"></a>|{{ .Operation | ToOpMarkdown }} <!-- Sign {{ .By}} {{ .Signature }} -->|{{ .On | ToTime }}|{{ .Note }}|{{if .Valid }}‚úÖ{{ else }}‚ùì{{ end }}|{{ end }}{{ else }}
üåà Fresh new üåà{{ end }}
`

func participant(name string) string {
	return fmt.Sprintf("[%s](%s)", name, toMarkdownAnchor(name))
}

func toOpMarkdown(op StateChanger) string {
	switch e := op.(type) {
	case AddParticipant:
		return fmt.Sprintf("‚ûï Add %s <!-- Public key %s -->", participant(e.Name), e.PublicKey)
	case SplitParticipant:
		return fmt.Sprintf("ü™ì Split %s for %d", participant(e.Name), e.NewSplit)
	case Configure:
		return fmt.Sprintf("üíª Configure to %s", e.NewConfig)
	case Spend:
		return fmt.Sprintf("üí∏ %s spent $%d", participant(e.Who), e.Amount)
	case Transfer:
		return fmt.Sprintf("üì© %s transferred $%d to %s", participant(e.From), e.Amount, participant(e.To))
	case MultiOp:
		var result []string = make([]string, len(e.Ops))
		for i, o := range e.Ops {
			result[i] = toOpMarkdown(o)
		}

		return strings.Join(result, "<br />")
	default:
		panic(fmt.Sprint("Unknown event type", op))
	}
}

func toMarkdownAnchor(s string) string {
	return "#" + strings.ToLower(s)
}

func toTime(t int64) string {
	return time.Unix(t, 0).Format(time.RFC3339)
}

// Markdown converts a state to a markdown report.
func (s *State) Markdown(wr io.Writer) error {
	glance := func(x int, y int) string {
		p := s.Balance.Get(x, y)

		if p == 0 {
			return ""
		}

		if p < 0 {
			return fmt.Sprint("$", -p, "‚Üô")
		}

		return fmt.Sprint("$", p, "‚Üó")
	}

	balanceDetail := func(pIndex int, i int) string {
		p := s.Participants[pIndex]

		if i == 0 {
			return ""
		}

		if i > 0 {
			return fmt.Sprintf("- You **owe $%d** to %v\n", i, participant(p.Name))
		}

		return fmt.Sprintf("- You are **owed $%d** from %v\n", -i, participant(p.Name))
	}

	funcMap := template.FuncMap{
		"ToMarkdownAnchor": toMarkdownAnchor,
		"ToOpMarkdown":     toOpMarkdown,
		"ToTime":           toTime,
		"Glance":           glance,
		"BalanceDetail":    balanceDetail,
	}

	if s == nil {
		s = NewState()
	}

	tmpl, tmplErr := template.New("markdown").Funcs(funcMap).Parse(markdownTemplate)
	if tmplErr != nil {
		return fmt.Errorf("template parsing: %w", tmplErr)
	}

	execErr := tmpl.Execute(wr, s)
	if execErr != nil {
		return fmt.Errorf("template executing: %w", execErr)
	}

	return nil
}
